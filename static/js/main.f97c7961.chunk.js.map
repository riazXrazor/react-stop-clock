{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["defaultOptions","id","onTick","presist","key","presistanceType","window","localStorage","start","useState","t","d","parseJSON","console","duration","setDuration","useEffect","timer","setInterval","intervalToDuration","end","Date","clearInterval","className","map","val","style","margin","props","time","differenceInSeconds","e","this","CountdownTimer","log","TimerComponent","isTimerActive","stopTimer","startTimer","getCurrentTimeInSeconds","App","React","value","setValue","labels","minutes","seconds","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"odAOA,IAAIA,EAAiB,CACnBC,GADmB,EAEnBC,OAFmB,KAGnBC,SAHmB,EAInBC,IAJmB,mBAKnBC,gBAAiBC,OAAOC,c,EAGxB,YAAqB,+BASJ,YAAW,IACnBC,EAASC,oBAAS,WACvB,IAAIC,EAAI,IAAR,KACA,GAAI,EAAJ,QAAkB,CAChB,IAAMC,EAAI,0BAAgC,EAAhC,QAA4C,EAAtD,IACA,EACED,EAAIE,YAAJF,GAEA,0BACK,EADL,QACiB,EADjB,GAEEA,EAFF,eAOJ,OADAG,eACA,KAfwB,KAiBMJ,mBAjBN,IAiBnBK,EAjBmB,KAiBTC,EAjBS,KAsC1B,OApBAC,qBAAU,WACR,IAAMC,EAAQC,aACZ,kBACEH,GAAY,WACV,IAAMJ,EAAIQ,YAAmB,CAC3BX,MAD2B,EAE3BY,IAAK,IAAIC,OAKX,OAHI,EAAJ,QACE,YAEF,OAVN,KAcA,OAAO,WACLC,oBAhBJN,IAqBE,yBAAKO,UAAU,8BACZC,IAAIV,GAAU,cACb,OAAOW,EACL,0BACEF,UAAS,yBADX,EAEEnB,IAAQ,EAAL,UAFL,EAGEsB,MAAO,CAAEC,OAAQ,QAHnB,MAME,2BAAOJ,UAAS,oBAAsBnB,GACnCwB,UAAgBA,SAAhBA,GAAoCA,SAApCA,GARG,IAAV,UAlDa,mBAmEL,mBAAQ,0BAAgC,EAAhC,QAA4C,EAApD,KAnEK,eAqET,kBAAM,6BAAmC,EAAnC,QAA+C,EAArD,KArES,gBAuER,kBACX,0BACK,EADL,QACiB,EADjB,IAEE,IAAIP,MAHK,gBAvEQ,gBA6ER,WACX,IAAMV,EAAI,IAAV,KACA,0BAAgC,EAAhC,QAA4C,EAA5C,GAAuDA,EAAvD,gBA/EmB,6BAkFK,WACxB,IACE,IAAMkB,EAAOjB,YACX,0BAAgC,EAAhC,QAA4C,EAD9C,KAGA,OAAOkB,YAAoB,IAAD,KAA1B,GACA,MAAOC,GACP,WAxFF/B,EAAiB,EAAH,KAAdA,GACAgC,KAAA,GAAUhC,EAAV,GACAgC,KAAA,OAAchC,EAAd,OACAgC,KAAA,QAAehC,EAAf,QACAgC,KAAA,IAAWhC,EAAX,IACAgC,KAAA,gBAAuBhC,EAAvB,iB,eCVA,IAAIiC,EAAe,CACrBhC,GAAI,EAEJC,OAAS6B,IACPlB,QAAQqB,IAAIH,MATdI,E,EAAAA,eACAC,E,EAAAA,cACAC,E,EAAAA,UACAC,E,EAAAA,WACAC,E,EAAAA,wBAoCaC,MA3BH,KAAO,MAAD,EACUC,IAAMhC,SAAS,GADzB,mBACTiC,EADS,KACFC,EADE,KAGhB,OACE,oCACE,kBAACR,EAAD,CACES,OAAQ,CACNC,QAAS,MACTC,QAAS,SAGb,6BAAMJ,GACN,6BACE,4BAAQK,UAAWX,EAAeY,QAASV,GAA3C,SAGA,4BAAQS,SAAUX,EAAeY,QAASX,GAA1C,QAGA,4BAAQW,QAAS,IAAML,EAASJ,MAAhC,kBChCRU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f97c7961.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react'\nimport intervalToDuration from 'date-fns/intervalToDuration'\nimport parseJSON from 'date-fns/parseJSON'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\nimport map from 'lodash/map'\n\nlet defaultOptions = {\n  id: 1,\n  onTick: null,\n  presist: false,\n  key: 'react-stop-clock',\n  presistanceType: window.localStorage\n}\nclass ReactStopClock {\n  constructor(options) {\n    defaultOptions = { ...defaultOptions, ...options }\n    this.id = defaultOptions.id\n    this.onTick = defaultOptions.onTick\n    this.presist = defaultOptions.presist\n    this.key = defaultOptions.key\n    this.presistanceType = defaultOptions.presistanceType\n  }\n\n  TimerComponent = (props) => {\n    const [start] = useState(() => {\n      let t = new Date()\n      if (this.presist) {\n        const d = this.presistanceType.getItem(`${this.key}-${this.id}`)\n        if (d) {\n          t = parseJSON(d)\n        } else {\n          this.presistanceType.setItem(\n            `${this.key}-${this.id}`,\n            t.toISOString()\n          )\n        }\n      }\n      console.log(t)\n      return t\n    })\n    const [duration, setDuration] = useState({})\n    useEffect(() => {\n      const timer = setInterval(\n        () =>\n          setDuration(() => {\n            const d = intervalToDuration({\n              start,\n              end: new Date()\n            })\n            if (this.onTick) {\n              this.onTick(d)\n            }\n            return d\n          }),\n        1000\n      )\n      return () => {\n        clearInterval(timer)\n      }\n    }, [])\n\n    return (\n      <div className='react-stop-clock-container'>\n        {map(duration, (val, key) => {\n          return val ? (\n            <span\n              className={`react-stop-clock-time-${key}`}\n              key={`${this.key}-${val}${key}`}\n              style={{ margin: '3px' }}\n            >\n              {val}{' '}\n              <small className={`react-stop-clock-${key}`}>\n                {props.labels && props.labels[key] ? props.labels[key] : key}\n              </small>\n            </span>\n          ) : null\n        })}\n      </div>\n    )\n  }\n\n  isTimerActive = () => !!this.presistanceType.getItem(`${this.key}-${this.id}`)\n\n  stopTimer = () => this.presistanceType.removeItem(`${this.key}-${this.id}`)\n\n  startTimer = () =>\n    this.presistanceType.setItem(\n      `${this.key}-${this.id}`,\n      new Date().toISOString()\n    )\n\n  resetTimer = () => {\n    const d = new Date()\n    this.presistanceType.setItem(`${this.key}-${this.id}`, d.toISOString())\n  }\n\n  getCurrentTimeInSeconds = () => {\n    try {\n      const time = parseJSON(\n        this.presistanceType.getItem(`${this.key}-${this.id}`)\n      )\n      return differenceInSeconds(new Date(), time)\n    } catch (e) {\n      return 0\n    }\n  }\n}\n\nexport default ReactStopClock\n","import React from 'react'\n\nimport CountdownTimer from 'react-stop-clock'\nimport 'react-stop-clock/dist/index.css'\n\nconst {\n  TimerComponent,\n  isTimerActive,\n  stopTimer,\n  startTimer,\n  getCurrentTimeInSeconds\n} = new CountdownTimer({\n  id: 1,\n  // presist: true,\n  onTick: (e) => {\n    console.log(e)\n  }\n})\n\nconst App = () => {\n  const [value, setValue] = React.useState(0)\n\n  return (\n    <>\n      <TimerComponent\n        labels={{\n          minutes: 'min',\n          seconds: 'sec'\n        }}\n      />\n      <div>{value}</div>\n      <div>\n        <button disabled={!isTimerActive} onClick={startTimer}>\n          Start\n        </button>\n        <button disabled={isTimerActive} onClick={stopTimer}>\n          Stop\n        </button>\n        <button onClick={() => setValue(getCurrentTimeInSeconds())}>\n          get seconds\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}